/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2010-2013 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package org.glassfish.findbugs.findbugstotext;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

/**
 * Convert the errors in a findbugsXml.xml file to a plain text format
 * similar to compiler error messages:
 *
 * 	file:line:error message
 *
 * The findbugsXml.xml file is read on System.in and the errors are
 * written to System.out.  The JAXB classes modeling a BugCollection
 * were generated by NetBeans from the FindBugs schema.
 *
 * The "-a" option causes information to be printed about every source
 * line involved in an error, instead of just the first.  It also includes
 * additional informaiton about the "role" of each source line in an error.
 * For example, for "inconsistent synchronization" errors, this will tell
 * every place where the field is accessed without synchronization and
 * every place where the field is accessed with synchronization.
 *
 * @author Bill Shannon
 */
public class Main {
    public static void main(String[] args) throws Exception {
	boolean showall = args.length > 0 && args[0].equals("-a");
	JAXBContext jc = JAXBContext.newInstance(BugCollection.class);
	Unmarshaller unmarshaller = jc.createUnmarshaller();
	BugCollection bc = (BugCollection)unmarshaller.unmarshal(System.in);
	for (BugCollection.BugInstance bi : bc.getBugInstance()) {
	    SourceLine savesl = null;
	    SourceLine sl = null;
	    for (Object o : bi.getClazzOrTypeOrMethod()) {
		if (o instanceof SourceLine) {
		    sl = (SourceLine)o;
		    if (sl.getStart() == null && savesl != null)
			sl = savesl;
		    int lineno = 1;
		    if (sl.getStart() != null)
			lineno = sl.getStart();
		    String role = "";
		    if (showall && sl.getRole() != null)
			role = ", " + sl.getRole();
		    System.out.println(sl.getSourcepath() + ":" +
				lineno + ": " + bi.getType() + ": " +
				bi.getLongMessage() + role);
		    if (!showall)
			break;
		    continue;
		} else if (o instanceof BugCollection.BugInstance.Class) {
		    BugCollection.BugInstance.Class cl =
					(BugCollection.BugInstance.Class)o;
		    sl = cl.getSourceLine();
		} else if (o instanceof BugCollection.BugInstance.Method) {
		    BugCollection.BugInstance.Method m =
					(BugCollection.BugInstance.Method)o;
		    sl = m.getSourceLine();
		} else if (o instanceof BugCollection.BugInstance.Field) {
		    BugCollection.BugInstance.Field f =
					(BugCollection.BugInstance.Field)o;
		    sl = f.getSourceLine();
		/*
		} else if (o instanceof BugCollection.BugInstance.Type) {
		    BugCollection.BugInstance.Type t =
					(BugCollection.BugInstance.Type)o;
		    sl = t.getSourceLine();
		*/
		}
		if (savesl == null && sl != null && sl.getStart() != null)
		    savesl = sl;
		    // XXX - only save if for same class
	    }
	}
    }
}
