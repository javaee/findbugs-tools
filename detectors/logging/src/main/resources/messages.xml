<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2013 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="messagecollection.xsd">

        <Plugin>
            <ShortDescription>FindBugs Plugin for Logging</ShortDescription>
            <Details>Provides detectors that check for GlassFish recommended logging patterns.</Details>
        </Plugin>

        <Detector class="org.glassfish.findbugs.detectors.logging.DebugLoggingDetector">
            <Details>
                Finds unchecked usage of FINE or lower level logging without proper isLoggable() clause.
            </Details>
        </Detector>

        <Detector class="org.glassfish.findbugs.detectors.logging.LogDomainsUsageDetector">
            <Details>
                Finds usage of obsoleted LogDomains API.
            </Details>
        </Detector>

        <Detector class="org.glassfish.findbugs.detectors.logging.LoggerMethodParamOrReturnTypeDetector">
            <Details>
                Finds methods with Logger as return type or an input argument.
            </Details>
        </Detector>

        <Detector class="org.glassfish.findbugs.detectors.logging.LoggerInfoAnnotationsDetector">
            <Details>
                Finds logger declarations without LoggerInfo annotations and usage of logger names with invalid prefixes.
            </Details>
        </Detector>

        <Detector class="org.glassfish.findbugs.detectors.logging.LogMessageInfoAnnotationsDetector">
            <Details>
                Finds log messages with incorrect message ID pattern or missing LogMessageInfo annotation.
            </Details>
        </Detector>

        <Detector class="org.glassfish.findbugs.detectors.logging.SystemOutErrUsageDetector">
            <Details>
                Detects the usage of System.out or System.err within a class.
            </Details>
        </Detector>


        <BugPattern type="GF_UNCONDITIONAL_DEBUG_LOGGING">
            <ShortDescription>Unguarded FINE or lower level logging invocation.</ShortDescription>
            <LongDescription>Detected logging of computed expressions as FINE or lower level messages without Logger.isLoggable() check.</LongDescription>
            <Details>
<![CDATA[
<p>Checks for java.util.logging.Logger.fine() and lower level logging without an if block that checks whether the message is Loggable.</p>
]]>
            </Details>
        </BugPattern>

        <BugPattern type="GF_INCORRECT_CONDITIONAL_DEBUG_LOGGING">
            <ShortDescription>Incorrect conditional check for FINE or lower level logging invocations.</ShortDescription>
            <LongDescription>Detected that the Logger.isLoggable() check is different from the corresponding level of the message being logged.</LongDescription>
            <Details>
<![CDATA[
<p>Incorrect check of isLoggable() with a higher Level and the corresponding  logging at a different level.</p>
]]>
            </Details>
        </BugPattern>

        <BugPattern type="GF_LOG_DOMAINS_USAGE">
            <ShortDescription>Found usage of deprecated LogDomains Logging API.</ShortDescription>
            <LongDescription>Found usage of deprecated LogDomains Logging API.</LongDescription>
            <Details>
<![CDATA[
<p>The Logging should be based on annotations for defining log messages and loggers as per the GlassFish Logging conventions.</p>
]]>
            </Details>
        </BugPattern>

        <BugPattern type="GF_LOGGER_PARAM_OR_RETURN_TYPE">
            <ShortDescription>Found Logger declared as a method argument or return type.</ShortDescription>
            <LongDescription>Found Logger declared as a method argument or return type.</LongDescription>
            <Details>
<![CDATA[
<p>Logger should be defined as a static constant and used within the module.</p>
]]>
            </Details>
        </BugPattern>

        <BugPattern type="GF_MISSING_LOGGER_INFO_ANNOTATION">
            <ShortDescription>Found Logger declaration without LoggerInfo annotation.</ShortDescription>
            <LongDescription>Found Logger declaration without LoggerInfo annotation.</LongDescription>
            <Details>
<![CDATA[
<p>Logger name should be defined as a static constant and annotated with LoggerInfo annotation.</p>
]]>
            </Details>
        </BugPattern>

        <BugPattern type="GF_INVALID_LOGGER_NAME_PREFIX">
            <ShortDescription>Found invalid Logger name.</ShortDescription>
            <LongDescription>The logger name is not as per the conventions.</LongDescription>
            <Details>
<![CDATA[
<p>Logger name should start with one of the standard prefixes defined for the project.</p>
]]>
            </Details>
        </BugPattern>

        <BugPattern type="GF_MISSING_LOGMESSAGES_RB_ANNOTATION">
            <ShortDescription>Found resource bundle param without LogMessagesResourceBundle annotation.</ShortDescription>
            <LongDescription>Found Logger declaration without LogMessagesResourceBundle annotation.</LongDescription>
            <Details>
<![CDATA[
<p>Logger Resource bundle name should be defined as a static constant and annotated with LogMessagesResourceBundle annotation.</p>
]]>
            </Details>
        </BugPattern>

        <BugPattern type="GF_INVALID_MSG_ID_PATTERN">
            <ShortDescription>Found log message ID with incorrect pattern.</ShortDescription>
            <LongDescription>Found log message ID with incorrect pattern.</LongDescription>
            <Details>
<![CDATA[
<p>The log message ID should confirm to COMP_CODE-SUBSYSTEM-MSGID pattern.</p>
]]>
            </Details>
        </BugPattern>

        <BugPattern type="GF_MISSING_LOGMESSAGE_INFO_ANNOTATION">
            <ShortDescription>Found log message ID with missing LogMessageInfo annotation.</ShortDescription>
            <LongDescription>Found log message ID with missing LogMessageInfo annotation.</LongDescription>
            <Details>
<![CDATA[
<p>The log message ID should be annotated with LogMessageInfo annotation for documentation and localization purposes.</p>
]]>
            </Details>
        </BugPattern>

        <BugPattern type="GF_SYSTEM_OUT_ERR_USAGE">
            <ShortDescription>Found the usage of System.out or System.err within a class.</ShortDescription>
            <LongDescription>Found the usage of System.out or System.err within a class.</LongDescription>
            <Details>
<![CDATA[
<p>The calls to System.out or System.err print methods should be replaced with standard java.util.logging APIs.</p>
]]>
            </Details>
        </BugPattern>

        <BugCode abbrev="GF_LOGGING">GlassFish Logging</BugCode>
        
</MessageCollection>